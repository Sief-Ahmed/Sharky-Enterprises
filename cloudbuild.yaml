options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

steps:
  # Your build steps...


steps:
  # Step 1: Scan the code using Snyk
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        # Install Snyk CLI
        curl -sL https://snyk.io/install | bash
        snyk auth "${SNYK_TOKEN}"
        snyk test --json > snyk-results.json
    id: 'snyk-scan'
    secretEnv: ['SNYK_TOKEN']

  # Step 2: Scan the code using SonarQube and save the output
  - name: 'gcr.io/cloud-builders/mvn'
    args:
      - 'sonar:sonar'
      - '-Dsonar.projectKey=sharky-Enterprises'
      - '-Dsonar.host.url=http://localhost:9000'
      - '-Dsonar.login=${SONAR_TOKEN}'
    id: 'sonarqube-scan'
    secretEnv: ['SONAR_TOKEN']

  # Step 2.1: Fetch SonarQube analysis report via API
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        # Wait for SonarQube analysis to complete
        sleep 30
        # Fetch the analysis report
        curl -u "${SONAR_TOKEN}:" "http://localhost:9000/api/issues/search?componentKeys=sharky-Enterprises" > sonar-report.json
    id: 'fetch-sonarqube-report'
    waitFor: ['sonarqube-scan']
    secretEnv: ['SONAR_TOKEN']

  # Step 2.2: Upload SonarQube output to the bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args:
      - 'cp'
      - 'sonar-report.json'
      - 'gs://${_BUCKET_NAME}'
    id: 'upload-sonarqube-output'
    waitFor: ['fetch-sonarqube-report']

  # Step 3: Scan the code using OWASP Dependency Check
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'run'
      - '--rm'
      - '-v'
      - '/workspace:/src'
      - 'owasp/dependency-check'
      - '--project'
      - 'sharky-Enterprises'
      - '--scan'
      - '/src'
      - '--format'
      - 'JSON'
      - '--out'
      - '/src/owasp-report.json'
    id: 'owasp-scan'

  # Step 5: Send all code scan outputs to Cloud Storage bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args:
      - '-m'
      - 'cp'
      - 'snyk-results.json'
      - 'owasp-report.json'
      - 'gs://${_BUCKET_NAME}'
    id: 'upload-code-scans'

  # Step 6: Containerize the application (Docker build)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_IMAGE_URI}'
      - '.'
    id: 'docker-build'

  # Step 7: Scan the container image using Trivy
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v /workspace:/output \
          aquasec/trivy image \
          --security-checks vuln \
          --format json \
          -o /output/trivy-results.json \
          ${_IMAGE_URI}
    id: 'trivy-scan'

  # Step 8: Send Trivy output to the same bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args:
      - 'cp'
      - 'trivy-results.json'
      - 'gs://${_BUCKET_NAME}/image-scans/'
    id: 'upload-trivy-scan'

  # Step 9: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_IMAGE_URI}'
    id: 'push-to-artifact-registry'

images:
  - '${_IMAGE_URI}'

# Define secret environment variables using Secret Manager
availableSecrets:
  secretManager:
    - versionName: 'projects/720033023335/secrets/SNYK_TOKEN/versions/latest'
      env: 'SNYK_TOKEN'
    - versionName: 'projects/720033023335/secrets/SONAR_TOKEN/versions/latest'
      env: 'SONAR_TOKEN'

# Define substitution variables
substitutions:
  _IMAGE_URI: 'us-docker.pkg.dev/my-gcp-project/my-repo/my-app-image:latest'
  _BUCKET_NAME: 'sec-scans'
