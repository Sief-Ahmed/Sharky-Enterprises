options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

steps:
  #- name: maven:3-jdk-11
    entrypoint: mvn
    args: ['verify', 'sonar:sonar','-Dsonar.host.url=https://sonarcloud.io','-Dsonar.organization=gcpdevsecopsorgkey','-Dsonar.projectKey=gcpdevsecopsorgkey','-Dsonar.login=${_SONAR_TOKEN}']
    id: SAST Scan using SonarCloud in GCP DevSecOps Pipeline

 - name: 'ubuntu'
    entrypoint: bash
    args: 
        - '-c'
        - |-
          apt-get update
          apt-get -y install maven 
          SNYK_TOKEN=${_SNYK_TOKEN}
          export SNYK_TOKEN
          mvn snyk:test -fn 
    id: SCA Scan using Snyk in GCP DevSecOps Pipeline

  # # Step 2: Run Snyk security scan on the entire Cloud Build workspace
  # - name: 'snyk/snyk-cli:npm'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       snyk config set api=${_SNYK_TOKEN}
  #       snyk code test --severity-threshold=medium
  #   id: 'Snyk Code Test'

  # # Step 3: Run SonarQube code analysis
  # - name: 'gcr.io/cloud-builders/mvn'
  #   args: ['sonar:sonar', '-Dsonar.projectKey=${_SONAR_PROJECT_KEY}', '-Dsonar.host.url=${_SONAR_HOST_URL}', '-Dsonar.login=${_SONAR_AUTH_TOKEN}']
  #   id: 'SonarQube Analysis'

  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA']
  #   id: 'Push Docker Image'

  # # Step 4: Deploy the Docker image
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args: ['run', 'deploy', '$REPO_NAME', '--image', 'gcr.io/$PROJECT_ID/$REPO_NAME:$COMMIT_SHA']
  #   id: 'Deploy to Cloud Run'

# Optional: Notifications or further actions

substitutions:
  _SNYK_TOKEN: '8686f5ad-2e7d-487b-904e-24efa16fc928'
  _SONAR_PROJECT_KEY: 'Sharky-Enterprises'
  _SONAR_HOST_URL: 'https://your-sonarqube-instance.com'
  _SONAR_AUTH_TOKEN: 'be7e9422567f4c81bbcfe0021aabe1d5ae792486'
  _REPO_NAME: 'Sharky-Enterprises'

# Additional settings
timeout: 1200s
